{"_id":{"$oid":"562ce31e26da3f876ad82cc7"},"__v":0,"items":[{"_id":{"$oid":"562ce31e26da3f876ad82cca"},"description":"Typescript is statically typed: Variables have a type assigned at compile time that does not change anymore.\nFor example: a variable of type boolean can only be assigned true or false.","exercise":"var typeScriptIsGreat:boolean = 1; //TODO fix to make the program compile","solution":"var typeScriptIsGreat:boolean = true;","sortOrder":1,"title":"Type Declaration"},{"_id":{"$oid":"562ce31e26da3f876ad82cc9"},"description":"The typescript compiler infers a type, if a value is assigned and no explicit type is declared.","exercise":"var typeScriptIsGreat = true;//same as var typeScriptIsGreat:boolean = true;\ntypeScriptIsGreat = 1;//TODO fix compile error","solution":"var typeScriptIsGreat = true;//same as var typeScriptIsGreat:boolean = true;\ntypeScriptIsGreat = true;","sortOrder":2,"title":"Type Inference"},{"_id":{"$oid":"562ce31e26da3f876ad82cc8"},"description":"Numbers are floating point values as in Javascript.","exercise":"var height = 0.5;\nvar width = 2;\n(height * width).should.equal(?);//TODO replace ?","solution":"var height = 0.5;\nvar width = 2;\n(height * width).should.equal(1);","sortOrder":3,"title":"Numbers"}],"language":"typescript","title":"Typescript Intro - Types"}
{"_id":{"$oid":"562ce31e26da3f876ad82ccb"},"__v":0,"items":[{"_id":{"$oid":"562ce31e26da3f876ad82ccd"},"description":"Typescript is strongly typed: A variable is assigned a type, that cannot be changed.","exercise":"describe('Type Declaration', function () {\n\n  //Types are denoted by :\n  var name: string = \"Bruno\";\n  var isEmpty:boolean = false;\n  var age: number = 16;\n\n  //TODO fix the assignment value to make the program compile:\n  isEmpty = 0;\n});","solution":"describe('Type Declaration', function () {\n\n  //Types are denoted by :\n  var name: string = \"Bruno\";\n  var isEmpty:boolean = false;\n  var age: number = 16;\n\n  //TODO fix the assignment value to make the program compile:\n  isEmpty = false;\n});","sortOrder":1,"title":"Type Declaration"},{"_id":{"$oid":"562ce31e26da3f876ad82ccc"},"description":"Typescript is strongly typed: A variable is assigned a type, that cannot be changed.","exercise":"describe('Type Declaration', function () {\n\n  //Types are denoted by :\n  var name: string = \"Anna\";\n  var isEmpty:boolean = false;\n  var age: number = 16;\n\n  //TODO fix the assignment value to make the program compile:\n  isEmpty = 0;\n});","solution":"describe('Type Declaration', function () {\n\n  //Types are denoted by :\n  var name: string = \"Anna\";\n  var isEmpty:boolean = false;\n  var age: number = 16;\n\n  //TODO fix the assignment value to make the program compile:\n  isEmpty = false;\n});","sortOrder":2,"title":"Type Declaration 2"}],"language":"typescript","title":"Substraction"}
{"_id":{"$oid":"565f15fef731ea98413ce54e"},"authorId":{"$oid":"5656b5f88db11541c1dc3196"},"language":"typescript","title":"Enums","items":[{"sortOrder":1,"title":"Why do I need it?","description":"Enums are useful for describing a set of values that do not change.","exercise":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\n\nDay.SUNDAY.should.not.equal(Day.???);","solution":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\n\nDay.SUNDAY.should.not.equal(Day.WEDNESDAY);","_id":{"$oid":"565f15fef731ea98413ce54f"}},{"sortOrder":2,"title":"Assigning it to a variable","description":"Enums can be assigned to a variable with the enum type","exercise":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\nvar myFreeDay:Day = ???;\n\nDay.SUNDAY.should.equal(myFreeDay);","solution":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\nvar myFreeDay:Day = Day.SUNDAY;\n\nDay.SUNDAY.should.equal(myFreeDay);","_id":{"$oid":"56607e0a4f71b11f594eb7d9"}},{"sortOrder":3,"title":"Comparison with Strings","description":"Using enums instead of Strings has the advantage that Typos are detected by the compiler.","exercise":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\n\nvar isMyFreeDay = (day:string):boolean =\u003e day === 'MONDAY';\nvar isMyFreeDay2 = (day:Day):boolean =\u003e day === Day.MONDAY;\n\nisMyFreeDay(???).should.equal(true);\nisMyFreeDay2(???).should.equal(true);","solution":"enum Day {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY \n};\n\nvar isMyFreeDay = (day:string):boolean =\u003e day === 'MONDAY';\nvar isMyFreeDay2 = (day:Day):boolean =\u003e day === Day.MONDAY;\n\nisMyFreeDay('MONDAY').should.equal(true);\nisMyFreeDay2(Day.MONDAY).should.equal(true);","_id":{"$oid":"56615f17707c1d4d68b183bc"}}],"__v":0}
